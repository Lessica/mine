//
//  mine-common.cc
//  Part of Mine crypto library
//
//  You should not use this file, use mine.cc
//  instead which is automatically generated and includes this file
//  This is seperated to aid the development
//
//  Copyright (c) 2017 Muflihun Labs
//
//  This library is released under the Apache 2.0 license
//  https://github.com/muflihun/mine/blob/master/LICENSE
//
//  https://github.com/muflihun/mine
//

#include <random>
#include "src/mine-common.h"

using namespace mine;

const byte MineCommon::kRandomBytesList[256] = {
    0x6f, 0x48, 0x15, 0x46, 0x77, 0x58, 0x05, 0x0b, 0x02, 0x6f, 0x20, 0x66, 0x18, 0x5a, 0x17, 0x27,
    0x45, 0x6c, 0x0f, 0x33, 0x08, 0x58, 0x2a, 0x54, 0x75, 0x53, 0x1e, 0x2a, 0x09, 0x13, 0x0f, 0x20,
    0x49, 0x49, 0x4b, 0x18, 0x3c, 0x1f, 0x06, 0x0e, 0x58, 0x52, 0x7c, 0x25, 0x58, 0x7d, 0x33, 0x27,
    0x14, 0x47, 0x66, 0x3f, 0x68, 0x66, 0x49, 0x27, 0x77, 0x10, 0x33, 0x26, 0x6c, 0x34, 0x10, 0x4e,
    0x10, 0x48, 0x07, 0x7c, 0x11, 0x06, 0x60, 0x61, 0x28, 0x29, 0x47, 0x5b, 0x3b, 0x16, 0x75, 0x74,
    0x14, 0x4a, 0x4a, 0x78, 0x21, 0x35, 0x77, 0x50, 0x17, 0x74, 0x3c, 0x26, 0x05, 0x31, 0x65, 0x36,
    0x48, 0x3c, 0x29, 0x4c, 0x1e, 0x78, 0x5e, 0x51, 0x16, 0x7f, 0x0b, 0x6d, 0x14, 0x41, 0x6e, 0x15,
    0x35, 0x7a, 0x4c, 0x59, 0x52, 0x5e, 0x0c, 0x22, 0x29, 0x7d, 0x6f, 0x0b, 0x73, 0x55, 0x0c, 0x44,
    0x3d, 0x70, 0x15, 0x33, 0x71, 0x23, 0x34, 0x77, 0x39, 0x68, 0x04, 0x6d, 0x2b, 0x4b, 0x52, 0x4d,
    0x30, 0x03, 0x38, 0x09, 0x5b, 0x58, 0x09, 0x5f, 0x4b, 0x54, 0x5d, 0x53, 0x35, 0x6b, 0x48, 0x43,
    0x3e, 0x58, 0x7d, 0x48, 0x7e, 0x6d, 0x71, 0x28, 0x14, 0x0e, 0x41, 0x58, 0x20, 0x7b, 0x48, 0x14,
    0x1f, 0x68, 0x07, 0x6d, 0x62, 0x4a, 0x72, 0x34, 0x7d, 0x66, 0x3e, 0x42, 0x79, 0x47, 0x36, 0x11,
    0x37, 0x08, 0x1f, 0x0a, 0x08, 0x2f, 0x66, 0x11, 0x2b, 0x0e, 0x03, 0x33, 0x14, 0x66, 0x25, 0x3e,
    0x08, 0x6f, 0x6e, 0x69, 0x71, 0x1e, 0x1c, 0x02, 0x09, 0x0a, 0x45, 0x24, 0x73, 0x58, 0x4b, 0x43,
    0x5a, 0x53, 0x4f, 0x0e, 0x39, 0x71, 0x13, 0x0c, 0x02, 0x46, 0x66, 0x2a, 0x56, 0x4c, 0x2b, 0x37,
    0x34, 0x45, 0x6e, 0x01, 0x4d, 0x12, 0x35, 0x4a, 0x29, 0x66, 0x30, 0x5b, 0x31, 0x4f, 0x6e, 0x3d
};

std::size_t MineCommon::countChars(const std::string& str) noexcept
{
    std::size_t result = 0UL;
    for (auto it = str.begin(); it <= str.end();) {
        int c = *it & 0xff;
        int charCount = 0;
        if (c == 0x0) {
            // \0
            ++it; // we increment iter manually
        } else if (c <= 0x7f) {
            charCount = 1;
        } else if (c <= 0x7ff) {
            charCount = 2;
        } else if (c <= 0xffff) {
            charCount = 3;
        } else {
            charCount = 4;
        }
        result += charCount;
        it += charCount;
    }
    return result;
}

ByteArray MineCommon::generateRandomBytes(const std::size_t len)
{
    ByteArray result(len, 'x');
    std::random_device rd;
    std::mt19937 rng(rd());
    std::uniform_int_distribution<int> uni(0, kRandomBytesCount - 1);
    std::generate(result.begin(), result.end(), [&] {
        return kRandomBytesList[uni(rng)];
    });
    return result;
}
